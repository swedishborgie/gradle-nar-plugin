plugins {
    id 'me.qoomon.git-versioning' version '4.2.0'
    id 'groovy'
    id 'signing'
    id 'maven-publish'
    id 'java-gradle-plugin'
}

group = 'io.github.swedishborgie'
version = '0.0.0-develop'
sourceCompatibility = 1.8
gitVersioning.apply {
    branch {
        pattern = '.*'
        versionFormat = '${branch}-${commit.short}-SNAPSHOT'
    }
    tag {
        pattern = 'v(?<tagVersion>[0-9].*)'
        versionFormat = '${tagVersion}'
    }
}
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    testImplementation gradleTestKit()
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0'
    testImplementation group: 'org.spockframework', name: 'spock-junit4', version: '2.0-groovy-3.0'
}

test {
    useJUnitPlatform()
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/funcTest/groovy')
        resources.srcDir file('src/funcTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf { isReleaseVersion }
}

publishing {
    repositories {
        maven {
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'OSSRH USER NOT SET'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'OSSRH PASSWORD NOT SET'
            }
        }
    }
    publications {
        pluginMaven(MavenPublication) {
            pom {
                name = 'Gradle Nar Plugin for Apache NiFi'
                description = 'Gradle plugin to support development of Apache NiFi nar archives'
                url = 'https://github.com/swedishborgie/gradle-nar-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    connection = 'scm:https://github.com/swedishborgie/gradle-nar-plugin.git'
                    developerConnection = 'scm:git:https://github.com/swedishborgie/gradle-nar-plugin.git'
                    url = 'https://github.com/swedishborgie/gradle-nar-plugin'
                }
                developers {
                    developer {
                        id = 'swedishborgie'
                        name = 'Michael Powers'
                        email = 'swedishborgie@gmail.com'
                        organization = 'Self'
                        organizationUrl = 'https://github.com/swedishborgie/'
                    }
                    developer {
                        id = 'rkuehne'
                        name = 'Robert KÃ¼hne'
                        email = 'sponiro@gmail.com'
                        organization = 'Self'
                        organizationUrl = 'https://github.com/sponiro/'
                    }
                }
            }
        }
    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.pluginMaven
}

